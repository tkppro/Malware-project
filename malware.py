import os
import sys
from winreg import *
import json
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QApplication, QWidget, QPushButton, QListWidgetItem, QFileDialog, QMainWindow, QMessageBox
from PyQt5.QtGui import QIcon
from PyQt5.QtCore import pyqtSlot
import time

class Ui_MainWindow(QMainWindow):
    def setupUi(self):
        self.setObjectName("MainWindow")
        self.resize(420, 300)
        self.centralwidget = QtWidgets.QWidget(self)
        self.centralwidget.setObjectName("centralwidget")
        self.lineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit.setGeometry(QtCore.QRect(130, 30, 181, 20))
        self.lineEdit.setObjectName("lineEdit")
        self.toolButton = QtWidgets.QToolButton(self.centralwidget)
        self.toolButton.setGeometry(QtCore.QRect(324, 30, 31, 21))
        self.toolButton.setObjectName("toolButton")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(230, 60, 81, 23))
        self.pushButton.setObjectName("pushButton")
        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(130, 60, 81, 23))
        self.pushButton_2.setObjectName("pushButton_2")
        self.listView = QtWidgets.QListView(self.centralwidget)
        self.listView.setGeometry(QtCore.QRect(5, 111, 411, 151))
        self.listView.setObjectName("listView")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(170, 0, 131, 16))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(40, 30, 81, 16))
        self.label_2.setObjectName("label_2")
        self.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(self)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 420, 21))
        self.menubar.setObjectName("menubar")
        self.menuasd = QtWidgets.QMenu(self.menubar)
        self.menuasd.setObjectName("menuasd")
        self.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(self)
        self.statusbar.setObjectName("statusbar")
        self.setStatusBar(self.statusbar)
        self.actionOpen = QtWidgets.QAction(self)
        self.actionOpen.setObjectName("actionOpen")
        self.actionClear = QtWidgets.QAction(self)
        self.actionClear.setObjectName("actionClear")
        self.actionClear.triggered.connect(self.clear_log)
        self.actionExit = QtWidgets.QAction(self)
        self.actionExit.setObjectName("actionExit")
        self.actionExit.triggered.connect(self.close_application)
        self.menuasd.addAction(self.actionOpen)
        self.menuasd.addAction(self.actionClear)
        self.menuasd.addSeparator()
        self.menuasd.addAction(self.actionExit)
        self.menubar.addAction(self.menuasd.menuAction())
        self.toolButton.clicked.connect(self.openFile)

        self.progress = QtWidgets.QProgressBar(self)
        self.progress.setGeometry(130, 110, 215, 20)

        self.retranslateUi(self)
        QtCore.QMetaObject.connectSlotsByName(self)
        self.show()

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.toolButton.setText(_translate("MainWindow", "..."))
        # self.toolButton.clicked.connect(self.openFile(MainWindow))
        self.pushButton.setText(_translate("MainWindow", "Deep scan"))
        self.pushButton.clicked.connect(self.deepScanClick)
        self.pushButton_2.setText(_translate("MainWindow", "Quick scan"))
        self.pushButton_2.clicked.connect(self.quickScanClick)
        self.label.setText(_translate("MainWindow", "TA Anti-virus"))
        self.label_2.setText(_translate("MainWindow", "Folder Location"))
        self.menuasd.setTitle(_translate("MainWindow", "File"))
        self.actionOpen.setText(_translate("MainWindow", "Open"))
        # self.actionOpen.triggered.connect(self.openFile(MainWindow))
        self.actionClear.setText(_translate("MainWindow", "Clear log"))
        self.actionExit.setText(_translate("MainWindow", "Exit"))
        self.listView.setModel(model)
        model.appendRow(QtGui.QStandardItem('Initializing application..... Please choose folder or file'))

    def quickScanClick(self):
        model.appendRow(QtGui.QStandardItem('Quick scan activated!'))


        # for i in entries:
        #     item = QtGui.QStandardItem(i)
        #     model.appendRow(item)

    def deepScanClick(self):
        model.appendRow(QtGui.QStandardItem('Deep scan activated!'))
        model.appendRow(QtGui.QStandardItem('Reading data from data.json...'))
        try:
            handle_delete()
        except:
            pass
        self.completed = 0

        while self.completed < 100:
            self.completed += 0.0001
            self.progress.setValue(self.completed)

    def clear_log(self):
        model.removeRows(0, model.rowCount())
        self.progress.setValue(0)

    def openFile(self):
        options = QFileDialog.Options()
        options |= QFileDialog.DontUseNativeDialog
        fileName, _ = QFileDialog.getOpenFileName(self, "Open file", "",
                                                  "All Files (*);;Python Files (*.py)", options=options)
        if fileName:
            print(fileName)
            os.startfile(fileName)

    def close_application(self):

        choice = QMessageBox.question(self, 'Message',
                                      "Are you sure to quit?", QMessageBox.Yes |
                                      QMessageBox.No, QMessageBox.No)

        if choice == QMessageBox.Yes:
            sys.exit()
        else:
            pass


# perform behavior-based detection
def check_file_exist(path):
    return os.path.isfile(path)


def delete_file(path):
    os.remove(path)


def check_registry_exist(path):
    check = None

    try:
        index = path.find('\\')

        root_path = path[:index]
        path = path[(index + 1):]

        index = path.rfind('\\')

        key = path[(index + 1):]
        path = path[:index]

        reg = None

        if root_path == 'HKEY_LOCAL_MACHINE':
            reg = ConnectRegistry(None, HKEY_LOCAL_MACHINE)
        elif (root_path == 'HKEY_CURRENT_USER'):
            reg = ConnectRegistry(None, HKEY_CURRENT_USER)
        elif root_path == 'HKEY_CLASSES_ROOT':
            reg = ConnectRegistry(None, HKEY_CLASSES_ROOT)
        elif root_path == 'HKEY_USERS':
            reg = ConnectRegistry(None, HKEY_USERS)
        else:
            reg = ConnectRegistry(None, HKEY_CURRENT_CONFIG)

        k = OpenKey(reg, path)
        value = QueryValueEx(k, key)
        check = True
    except:
        check = False

    return check


def delete_registry(path):
    index = path.find('\\')
    root_path = path[:index]
    path = path[(index + 1):]
    index = path.rfind('\\')
    key = path[(index + 1):]
    path = path[:index]
    if root_path == 'HKEY_LOCAL_MACHINE':
        hkey = OpenKey(HKEY_LOCAL_MACHINE, path, 0, KEY_ALL_ACCESS)
    elif (root_path == 'HKEY_CURRENT_USER'):
        hkey = OpenKey(HKEY_LOCAL_MACHINE, path, 0, KEY_ALL_ACCESS)
    elif root_path == 'HKEY_CLASSES_ROOT':
        hkey = OpenKey(HKEY_CLASSES_ROOT, path, 0, KEY_ALL_ACCESS)
    elif root_path == 'HKEY_USERS':
        hkey = OpenKey(HKEY_USERS, path, 0, KEY_ALL_ACCESS)
    else:
        hkey = OpenKey(HKEY_CURRENT_CONFIG, path, 0, KEY_ALL_ACCESS)

    hkey = OpenKey(HKEY_LOCAL_MACHINE, path, 0, KEY_ALL_ACCESS)
    DeleteValue(hkey, key)


def read_file_json():
    with open('data.json') as json_file:
        data = json.load(json_file)
        return data


def handle_delete():
    data = read_file_json()
    t_s = time.time()
    for data_el in data:
        model.appendRow(QtGui.QStandardItem('Checking virus ' + data_el['name']))
        check = True

        for file_name in data_el['file_created']:
            if check_file_exist(file_name) == False:
                check = False

        for hkey_name in data_el['hkey_created']:
            if check_registry_exist(hkey_name) == False:
                check = False

        if check == True:
            model.appendRow(QtGui.QStandardItem('Virus ' + data_el['name'] + ' found!'))

        for file_name in data_el['file_created']:
            if check_file_exist(file_name) == False:
                try:
                    delete_file(file_name)
                    model.appendRow(QtGui.QStandardItem('Deleting file ' + file_name + ' done!'))
                except:
                    model.appendRow(QtGui.QStandardItem('Could not find ' + file_name + '!'))
                    pass

        for hkey_name in data_el['hkey_created']:
            if check_registry_exist(hkey_name) == False:
                try:
                    delete_registry(hkey_name)
                    model.appendRow(QtGui.QStandardItem('Deleting registry ' + hkey_name + ' done!'))
                except:
                    model.appendRow(QtGui.QStandardItem('Could not find registry ' + hkey_name + '!'))
                    pass

    t_e = time.time()
    timeScanned = round((t_e - t_s), 3)
    model.appendRow(QtGui.QStandardItem('Time scanned: ' + str(timeScanned) + 's'))


# Main func
if __name__ == "__main__":
    # entries = ['one', 'two', 'three']
    model = QtGui.QStandardItemModel()

    app = QtWidgets.QApplication(sys.argv)
    ex = Ui_MainWindow()
    ex.setupUi()
    sys.exit(app.exec_())
